package communication;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * An object encapsulating the set of keys relevant to
 * a client in a single round of message broadcasting.  All
 * of the included keys would be applied to a user-submitted
 * message on the client side before it is submitted to the
 * server for processing.  These are serializable, since they
 * are generated by the server and distributed to all clients
 * each round.
 * @author Sophie Dawson
 *
 */
public class KeySet implements Serializable {
	private static final long serialVersionUID = 5671467559046189587L;
	private HashSet<Key> keys = new HashSet<Key>();
	
	public KeySet() {
	}
	
	/**
	 * Adds a key to the keyset
	 * @param key The key to be added
	 */
	public void addKey(Key key) {
		keys.add(key);
	}
	
	/**
	 * Returns the current set of keys
	 * @return A Set object containing all the keys
	 */
	public Set<Key> getKeySet() {
		return keys;
	}
	
	public int sum() {
		if (keys != null) {
			int sum = 0;
			for (Key k : keys) {
				if ( k.getKeyop()==Keyop.ADD)
					sum += k.getKey();
				else
					sum -= k.getKey();
			}
			
			return sum;
		} else {
			return 0;
		}
	}

	public String toString() {
		String str = "[";
		for (Key k : keys) {
			str = str + k.toString() + ",";
		}
		
		return str + "]";
	}
}
